package Gui;

/**
 * Created by Eric on 9/21/2015.
 */

//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import java.awt.*;
        import java.awt.event.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.*;
        import javax.swing.event.*;

public class NewGui extends JPanel {
    private JButton jb1;
    private JButton jb2;
    private JButton jb3;
    private JButton jb4;
    private JTextArea jcomp5;
    private JTextArea jcomp6;
    private JTextArea jcomp7;
    private JTextArea jcomp8;
    File fl;


    public NewGui() {
        //construct components
        jb1 = new JButton ("Load");
        jb2 = new JButton ("Revers");
        jb3 = new JButton ("Reverse 2w.");
        jb4 = new JButton ("Count");
        jcomp5 = new JTextArea (5, 5);
        jcomp6 = new JTextArea (5, 5);
        jcomp7 = new JTextArea (5, 5);
        jcomp8 = new JTextArea (5, 5);

        //adjust size and set layout
        setPreferredSize (new Dimension (902, 521));
        setLayout(null);

        //add components
        add (jb1);
        add(jb2);
        add(jb3);
        add (jb4);
        add (jcomp5);
        add (jcomp6);
        add (jcomp7);
        add(jcomp8);

        //set component bounds (only needed by Absolute Positioning)
        jb1.setBounds(5, 30, 220, 30);
        jb2.setBounds(225, 30, 220, 30);
        jb3.setBounds(445, 30, 220, 30);
        jb4.setBounds (665, 30, 220, 30);
        jcomp5.setBounds (10, 60, 210, 420);
        jcomp6.setBounds (230, 60, 210, 420);
        jcomp7.setBounds (450, 60, 210, 420);
        jcomp8.setBounds(670, 60, 210, 420);

        jb1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String[] lines = new String[500];
                String str1;
                int x = 0;
                int i;
                JFileChooser jfc = new JFileChooser();
                jfc.showOpenDialog(jfc);
                fl = jfc.getSelectedFile();
                try {
                    BufferedReader br = new BufferedReader(new FileReader(fl));

                    while ((str1 = br.readLine()) != null) {
                        lines[x] = str1;
                        x++;
                    }
                    for (i = 0; i < x; i++) {
                        jcomp5.append(lines[i]);
                        jcomp5.append("\n");
                    }
                } catch (Exception ee) {
                    ee.printStackTrace();
                    System.out.println("It did not work");
                }
            }
        });


        //Button one to swap each word
        jb2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String[] lines = new String[500];
                String[] tokens;
                String str1;
                int i, k;
                int x = 0;

                try {
                    BufferedReader br = new BufferedReader(new FileReader(fl));

                    while((lines[x] = br.readLine()) != null){
                        x++;
                    }

                    for(k = 0; k < x; k++){
                        tokens = lines[k].split(" ");
                        i = tokens.length;
                        for (int z = i; z > 0; z--) {
                            jcomp6.append(tokens[z - 1] + " ");
                        }
                        jcomp6.append("\n");
                    }

                } catch (Exception ee) {
                    ee.printStackTrace();
                    System.out.println("It did not work");
                }
            }
        });




        //Button one swat 2 words
        jb3.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String[] lines = new String[500];
                String[] tokens;
                String str1;
                int i, k;
                int numofline = 0;

                try {
                    BufferedReader br = new BufferedReader(new FileReader(fl));

                    while ((lines[numofline] = br.readLine()) != null) {
                        numofline++;
                    }
                    for (k = 0; k < numofline; k++) {
                        tokens = lines[k].split(" ");
                        i = tokens.length;
                        for (int x = 0; x < i; x++) {
                            if (x % 2 == 0) {
                                if (x == (i - 1)) {
                                    jcomp7.append(tokens[x] + " ");
                                } else {
                                    jcomp7.append(tokens[x + 1] + " ");
                                    jcomp7.append(tokens[x] + " ");
                                }
                            }
                        }
                        jcomp7.append("\n");
                    }

                } catch (Exception ee) {
                    ee.printStackTrace();
                    System.out.println("It did not work");
                }


            }
        });
        //Button one to count letters
        jb4.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                String[] lines = new String[500];
                String str1;
                int i, k;
                int numofline = 0;
                String[] tokens = new String[200];
                int[] occurance = new int[200];
                String[] array;

                try {
                    BufferedReader br = new BufferedReader(new FileReader(fl));

                    while ((lines[numofline] = br.readLine()) != null) {
                        numofline++;
                    }
                    for (k = 0; k < numofline; k++) {
                        array = lines[k].split(" ");
                        i = array.length;

                        for (int x = 0; x < i; x++) {
                            for (int y = 0; y < 200; y++) {
                                if ((array[x].equalsIgnoreCase(tokens[y])))
                                    occurance[y]++;
                                else if (tokens[y] == null) {
                                    tokens[y] = array[x];
                                    occurance[y]++;
                                    y = 200;
                                }
                            }
                        }
                    }

                    for (int x = 0; x < 200; x++) {
                        if(tokens[x] != null) {
                            jcomp8.append(tokens[x] + " " + occurance[x]);
                            jcomp8.append("\n");
                        }
                    }

                } catch (Exception ee) {
                    ee.printStackTrace();
                    System.out.println("It did not work");
                }

            }
        });



    }


    public static void main (String[] args) {
        JFrame frame = new JFrame ("MyPanel");
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add (new NewGui());
        frame.pack();
        frame.setVisible (true);
    }
}
